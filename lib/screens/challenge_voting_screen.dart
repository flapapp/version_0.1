import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '../models/challenge.dart';
import '../services/challenge_service.dart';

class ChallengeVotingScreen extends StatefulWidget {
  final Challenge challenge;
  final String participantId;
  
  const ChallengeVotingScreen({
    Key? key, 
    required this.challenge,
    required this.participantId,
  }) : super(key: key);

  @override
  _ChallengeVotingScreenState createState() => _ChallengeVotingScreenState();
}

class _ChallengeVotingScreenState extends State<ChallengeVotingScreen> {
  final ChallengeService _challengeService = ChallengeService();
  final FirebaseAuth _auth = FirebaseAuth.instance;
  
  final Map<String, double> _criteria = {
    'technical': 0.0,
    'creativity': 0.0,
    'difficulty': 0.0,
    'quality': 0.0,
  };
  
  bool _isVoting = false;
  String? _comment;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFF1e7d32),
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        title: const Text(
          'üó≥Ô∏è –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è',
          style: TextStyle(color: Colors.white),
        ),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.white),
          onPressed: () => Navigator.pop(context),
        ),
      ),
      body: SafeArea(
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(20),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // –ó–∞–≥–æ–ª–æ–≤–æ–∫
              _buildHeader(),
              const SizedBox(height: 20),
              
              // –ö—Ä–∏—Ç–µ—Ä—ñ—ó –æ—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è
              _buildCriteriaSection(),
              const SizedBox(height: 20),
              
              // –ö–æ–º–µ–Ω—Ç–∞—Ä (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
              _buildCommentSection(),
              const SizedBox(height: 20),
              
              // –ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞
              _buildTotalScoreSection(),
              const SizedBox(height: 30),
              
              // –ö–Ω–æ–ø–∫–∞ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è
              _buildVoteButton(),
              const SizedBox(height: 20),
              
              // –ü–æ—è—Å–Ω–µ–Ω–Ω—è –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤
              _buildCriteriaExplanation(),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildHeader() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(16),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Text(
                widget.challenge.typeIcon,
                style: const TextStyle(fontSize: 32),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      widget.challenge.title,
                      style: const TextStyle(
                        fontSize: 20,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    Text(
                      '–£—á–∞—Å–Ω–∏–∫: ${widget.participantId}',
                      style: TextStyle(
                        fontSize: 14,
                        color: Colors.grey[600],
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
            decoration: BoxDecoration(
              color: Colors.blue.withOpacity(0.2),
              borderRadius: BorderRadius.circular(12),
              border: Border.all(color: Colors.blue.withOpacity(0.3)),
            ),
            child: const Text(
              '–ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –≤—ñ–¥–∫—Ä–∏—Ç–µ',
              style: TextStyle(
                color: Colors.blue,
                fontWeight: FontWeight.w600,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildCriteriaSection() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(16),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'üìä –ö—Ä–∏—Ç–µ—Ä—ñ—ó –æ—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 20),
          
          _buildCriteriaItem(
            '‚öΩ –¢–µ—Ö–Ω—ñ—á–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è',
            '–Ø–∫—ñ—Å—Ç—å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤',
            'technical',
            0.4,
            Colors.green,
          ),
          
          _buildCriteriaItem(
            'üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å',
            '–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å —Ç–∞ —Ç–≤–æ—Ä—á–∏–π –ø—ñ–¥—Ö—ñ–¥',
            'creativity',
            0.3,
            Colors.purple,
          ),
          
          _buildCriteriaItem(
            'üî• –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å',
            '–†—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –≤–∏–∫–æ–Ω–∞–Ω–æ–≥–æ',
            'difficulty',
            0.2,
            Colors.orange,
          ),
          
          _buildCriteriaItem(
            'üìπ –Ø–∫—ñ—Å—Ç—å –≤—ñ–¥–µ–æ',
            '–¢–µ—Ö–Ω—ñ—á–Ω–∞ —è–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—É',
            'quality',
            0.1,
            Colors.blue,
          ),
        ],
      ),
    );
  }

  Widget _buildCriteriaItem(String title, String description, String key, 
      double weight, Color color) {
    return Container(
      margin: const EdgeInsets.only(bottom: 20),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: color.withOpacity(0.05),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: color.withOpacity(0.2)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      title,
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.w600,
                        color: color,
                      ),
                    ),
                    const SizedBox(height: 4),
                    Text(
                      description,
                      style: TextStyle(
                        fontSize: 12,
                        color: Colors.grey[600],
                      ),
                    ),
                  ],
                ),
              ),
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                decoration: BoxDecoration(
                  color: color.withOpacity(0.2),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Text(
                  '${(weight * 100).toInt()}%',
                  style: TextStyle(
                    color: color,
                    fontSize: 12,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          
          // –°–ª–∞–π–¥–µ—Ä –æ—Ü—ñ–Ω–∫–∏
          Row(
            children: [
              Text(
                '0',
                style: TextStyle(
                  fontSize: 12,
                  color: Colors.grey[600],
                ),
              ),
              Expanded(
                child: SliderTheme(
                  data: SliderTheme.of(context).copyWith(
                    activeTrackColor: color,
                    inactiveTrackColor: color.withOpacity(0.3),
                    thumbColor: color,
                    overlayColor: color.withOpacity(0.2),
                    valueIndicatorColor: color,
                    valueIndicatorTextStyle: const TextStyle(
                      color: Colors.white,
                      fontSize: 14,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  child: Slider(
                    value: _criteria[key]!,
                    min: 0.0,
                    max: 10.0,
                    divisions: 10,
                    label: _criteria[key]!.toStringAsFixed(1),
                    onChanged: (value) {
                      setState(() {
                        _criteria[key] = value;
                      });
                    },
                  ),
                ),
              ),
              Text(
                '10',
                style: TextStyle(
                  fontSize: 12,
                  color: Colors.grey[600],
                ),
              ),
            ],
          ),
          
          // –ü–æ—Ç–æ—á–Ω–∞ –æ—Ü—ñ–Ω–∫–∞
          Center(
            child: Text(
              '–û—Ü—ñ–Ω–∫–∞: ${_criteria[key]!.toStringAsFixed(1)}',
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
                color: color,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildCommentSection() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(16),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 16),
          TextField(
            onChanged: (value) {
              _comment = value;
            },
            maxLines: 3,
            decoration: InputDecoration(
              hintText: '–î–æ–¥–∞–π—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –≤–∞—à–æ—ó –æ—Ü—ñ–Ω–∫–∏...',
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(12),
                borderSide: BorderSide(color: Colors.grey.withOpacity(0.3)),
              ),
              focusedBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(12),
                borderSide: const BorderSide(color: Color(0xFF1e7d32)),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildTotalScoreSection() {
    final totalScore = _calculateTotalScore();
    final scoreColor = _getScoreColor(totalScore);
    
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: BorderRadius.circular(16),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'üèÜ –ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 20),
          
          Center(
            child: Container(
              width: 120,
              height: 120,
              decoration: BoxDecoration(
                color: scoreColor.withOpacity(0.1),
                shape: BoxShape.circle,
                border: Border.all(color: scoreColor, width: 3),
              ),
              child: Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Text(
                      totalScore.toStringAsFixed(1),
                      style: TextStyle(
                        fontSize: 32,
                        fontWeight: FontWeight.bold,
                        color: scoreColor,
                      ),
                    ),
                    Text(
                      '–∑ 10',
                      style: TextStyle(
                        fontSize: 14,
                        color: scoreColor.withOpacity(0.8),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
          
          const SizedBox(height: 20),
          
          // –†–æ–∑–±–∏–≤–∫–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä—ñ—è—Ö
          _buildScoreBreakdown(),
        ],
      ),
    );
  }

  Widget _buildScoreBreakdown() {
    return Column(
      children: [
        _buildScoreRow('‚öΩ –¢–µ—Ö–Ω—ñ–∫–∞', _criteria['technical']!, 0.4, Colors.green),
        _buildScoreRow('üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å', _criteria['creativity']!, 0.3, Colors.purple),
        _buildScoreRow('üî• –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å', _criteria['difficulty']!, 0.2, Colors.orange),
        _buildScoreRow('üìπ –Ø–∫—ñ—Å—Ç—å', _criteria['quality']!, 0.1, Colors.blue),
      ],
    );
  }

  Widget _buildScoreRow(String label, double score, double weight, Color color) {
    final weightedScore = score * weight;
    
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        children: [
          SizedBox(
            width: 100,
            child: Text(
              label,
              style: const TextStyle(fontSize: 12),
            ),
          ),
          Expanded(
            child: LinearProgressIndicator(
              value: score / 10,
              backgroundColor: Colors.grey[300],
              valueColor: AlwaysStoppedAnimation<Color>(color),
              minHeight: 8,
            ),
          ),
          const SizedBox(width: 12),
          SizedBox(
            width: 60,
            child: Text(
              '${weightedScore.toStringAsFixed(1)}',
              style: TextStyle(
                fontSize: 14,
                fontWeight: FontWeight.bold,
                color: color,
              ),
              textAlign: TextAlign.right,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildVoteButton() {
    final totalScore = _calculateTotalScore();
    final canVote = totalScore > 0;
    
    return SizedBox(
      width: double.infinity,
      height: 56,
      child: ElevatedButton(
        onPressed: canVote && !_isVoting ? _submitVote : null,
        style: ElevatedButton.styleFrom(
          backgroundColor: canVote ? const Color(0xFFFF9800) : Colors.grey,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(28),
          ),
          elevation: 8,
        ),
        child: _isVoting
            ? const SizedBox(
                width: 24,
                height: 24,
                child: CircularProgressIndicator(
                  color: Colors.white,
                  strokeWidth: 2,
                ),
              )
            : Text(
                canVote ? 'üó≥Ô∏è –ü—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞—Ç–∏ (+1 –º–æ–Ω–µ—Ç–∞)' : '–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –æ—Ü—ñ–Ω–∫–∏',
                style: const TextStyle(
                  color: Colors.white,
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                ),
              ),
      ),
    );
  }

  Widget _buildCriteriaExplanation() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.1),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: Colors.white.withOpacity(0.2)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              const Icon(Icons.info_outline, color: Colors.white70, size: 20),
              const SizedBox(width: 8),
              Text(
                '–Ø–∫ –æ—Ü—ñ–Ω—é–≤–∞—Ç–∏:',
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),
          Text(
            '‚Ä¢ 0-3: –ü–æ–≥–∞–Ω–æ\n'
            '‚Ä¢ 4-5: –ó–∞–¥–æ–≤—ñ–ª—å–Ω–æ\n'
            '‚Ä¢ 6-7: –î–æ–±—Ä–µ\n'
            '‚Ä¢ 8-9: –í—ñ–¥–º—ñ–Ω–Ω–æ\n'
            '‚Ä¢ 10: –Ü–¥–µ–∞–ª—å–Ω–æ',
            style: TextStyle(
              color: Colors.white70,
              fontSize: 14,
              height: 1.4,
            ),
          ),
          const SizedBox(height: 12),
          Text(
            '–í–∞—à–∞ –æ—Ü—ñ–Ω–∫–∞ –≤–ø–ª–∏–≤–∞—î –Ω–∞ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—á–∞—Å–Ω–∏–∫–∞!',
            style: TextStyle(
              color: Colors.white,
              fontSize: 12,
              fontStyle: FontStyle.italic,
            ),
          ),
        ],
      ),
    );
  }

  double _calculateTotalScore() {
    return _criteria['technical']! * 0.4 +
           _criteria['creativity']! * 0.3 +
           _criteria['difficulty']! * 0.2 +
           _criteria['quality']! * 0.1;
  }

  Color _getScoreColor(double score) {
    if (score >= 8.0) return Colors.green;
    if (score >= 6.0) return Colors.blue;
    if (score >= 4.0) return Colors.orange;
    return Colors.red;
  }

  Future<void> _submitVote() async {
    setState(() {
      _isVoting = true;
    });

    try {
      final currentUser = _auth.currentUser;
      if (currentUser == null) {
        throw Exception('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π');
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≥–æ–ª–æ—Å—É—î –∑–∞ —Å–µ–±–µ
      if (currentUser.uid == widget.participantId) {
        throw Exception('–ù–µ –º–æ–∂–Ω–∞ –≥–æ–ª–æ—Å—É–≤–∞—Ç–∏ –∑–∞ —Å–µ–±–µ');
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –≥–æ–ª–æ—Å—É–≤–∞–≤
      if (widget.challenge.votes.containsKey(currentUser.uid)) {
        throw Exception('–í–∏ –≤–∂–µ –≥–æ–ª–æ—Å—É–≤–∞–ª–∏ –∑–∞ —Ü–µ –≤—ñ–¥–µ–æ');
      }

      // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≥–æ–ª–æ—Å—É
      final confirmed = await _showVoteConfirmation();
      if (!confirmed) {
        return;
      }

      // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å—É
      await _challengeService.voteForVideo(
        widget.challenge.id,
        widget.participantId,
        _criteria,
      );

      // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Row(
            children: [
              const Icon(Icons.check_circle, color: Colors.white),
              const SizedBox(width: 12),
              const Expanded(
                child: Text(
                  '–í–∞—à –≥–æ–ª–æ—Å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ! +1 –º–æ–Ω–µ—Ç–∞',
                  style: TextStyle(fontSize: 16),
                ),
              ),
            ],
          ),
          backgroundColor: Colors.green,
          behavior: SnackBarBehavior.floating,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
        ),
      );

      // –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥
      Navigator.pop(context);
    } catch (e) {
      // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Row(
            children: [
              const Icon(Icons.error, color: Colors.white),
              const SizedBox(width: 12),
              Expanded(
                child: Text(
                  '–ü–æ–º–∏–ª–∫–∞: ${e.toString()}',
                  style: const TextStyle(fontSize: 16),
                ),
              ),
            ],
          ),
          backgroundColor: Colors.red,
          behavior: SnackBarBehavior.floating,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
        ),
      );
    } finally {
      setState(() {
        _isVoting = false;
      });
    }
  }

  Future<bool> _showVoteConfirmation() async {
    final totalScore = _calculateTotalScore();
    
    return await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≥–æ–ª–æ—Å—É'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –æ—Ü—ñ–Ω–∫—É ${totalScore.toStringAsFixed(1)}/10?'),
            const SizedBox(height: 16),
            const Text(
              '–ü—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–∏—Ç–∏ –≥–æ–ª–æ—Å –±—É–¥–µ –Ω–µ–º–æ–∂–ª–∏–≤–æ.',
              style: TextStyle(
                fontSize: 12,
                color: Colors.grey,
                fontStyle: FontStyle.italic,
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: const Text('–°–∫–∞—Å—É–≤–∞—Ç–∏'),
          ),
          ElevatedButton(
            onPressed: () => Navigator.pop(context, true),
            style: ElevatedButton.styleFrom(
              backgroundColor: const Color(0xFFFF9800),
            ),
            child: const Text(
              '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏',
              style: TextStyle(color: Colors.white),
            ),
          ),
        ],
      ),
    ) ?? false;
  }
}


